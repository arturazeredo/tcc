from argparse import ArgumentParser
from src.mediapipe import GooMedia
from src.randomgamer import construct_task
from src.buffer import BufferR
import hashlib
from src import geometry
from src import visualize
import src.datalog as dl
from src.grideyes import Grid
import numpy as np
#import dlib
import cv2
import os
from iris_tracking.test_eye import calculate_eye_movement_reference, calculate_eye_movement, calibrate_eye_position

CAM_AVALIABLE = True
SERVER_RUN = False

pface = GooMedia(1080) # Extrator dos pontos
buff = BufferR()

os.makedirs('data_eye_thales', exist_ok=True)
file_name = "data_eye_thales/info-" + dl.get_now_string() + '.log'
dl.create_logging(is_server=False,dev=file_name)

user = "pedro".encode()
ticket = hashlib.sha1(user).hexdigest()
counter_delay = 0
draw_enable = False
scores = []
step_next = False
runtime= 0.0
grid_eyes = Grid()
ship_step = False
buffing = []
got_a_point = False

if CAM_AVALIABLE:
    cam = cv2.VideoCapture(0)
    info_img = {'old': {'contour': None, 'points': None, 'box': None},
                'new': {'contour': None, 'points': None, 'box': None}}
    frame_start = True

    five_buffer = []
    c = 0
    switch = False
    old_frame = []

    history = []
    #reference_points = [(300, 300), (297, 277), (298, 285), (290, 252), (297, 270), (296, 259), (295, 235), (248, 235), (294, 218), (293, 208), (291, 171), (300, 303), (301, 307), (301, 309), (301, 309), (301, 312), (301, 316), (301, 320), (300, 327), (298, 281), (291, 281), (221, 211), (268, 239), (261, 240), (254, 241), (245, 238), (274, 236), (254, 221), (263, 220), (247, 223), (243, 227), (239, 243), (275, 343), (245, 233), (219, 244), (231, 239), (263, 273), (293, 300), (294, 307), (285, 303), (281, 307), (288, 308), (284, 310), (270, 319), (291, 278), (290, 270), (232, 223), (276, 253), (275, 276), (275, 272), (243, 274), (290, 261), (247, 214), (237, 217), (226, 198), (279, 216), (270, 222), (264, 314), (230, 315), (281, 280), (287, 282), (277, 313), (279, 313), (233, 213), (275, 280), (260, 213), (258, 207), (252, 178), (231, 205), (257, 192), (228, 220), (225, 216), (293, 304), (287, 306), (282, 309), (283, 281), (278, 313), (280, 314), (279, 313), (284, 278), (285, 311), (290, 310), (295, 309), (292, 327), (294, 320), (294, 316), (294, 312), (295, 309), (285, 311), (284, 312), (283, 314), (282, 317), (271, 300), (222, 277), (298, 283), (282, 312), (281, 313), (289, 285), (278, 284), (288, 284), (269, 258), (258, 264), (274, 276), (236, 186), (241, 197), (243, 208), (276, 323), (275, 206), (273, 190), (270, 174), (248, 240), (233, 249), (278, 234), (237, 230), (281, 247), (279, 274), (225, 257), (238, 254), (246, 256), (260, 254), (269, 250), (276, 245), (289, 237), (227, 273), (231, 230), (294, 281), (277, 260), (219, 244), (281, 241), (274, 276), (242, 234), (279, 268), (225, 296), (278, 231), (284, 264), (243, 331), (245, 340), (222, 276), (235, 321), (222, 229), (273, 352), (295, 283), (271, 266), (225, 241), (254, 236), (260, 236), (279, 315), (229, 288), (287, 362), (265, 354), (255, 349), (292, 189), (303, 362), (266, 235), (272, 233), (276, 232), (226, 229), (270, 227), (264, 226), (257, 227), (251, 229), (248, 231), (219, 226), (250, 235), (298, 291), (277, 295), (281, 279), (289, 292), (295, 226), (253, 340), (263, 346), (287, 355), (237, 329), (275, 229), (285, 249), (302, 355), (275, 359), (224, 292), (290, 310), (289, 312), (288, 315), (287, 319), (283, 325), (281, 311), (279, 311), (278, 310), (266, 307), (239, 291), (285, 241), (281, 226), (277, 227), (283, 312), (238, 310), (286, 226), (279, 334), (296, 251), (289, 245), (295, 243), (281, 262), (301, 346), (301, 336), (290, 336), (262, 324), (269, 283), (270, 330), (253, 283), (263, 291), (248, 296), (288, 347), (277, 266), (256, 330), (265, 337), (256, 315), (232, 301), (247, 317), (228, 308), (258, 301), (281, 254), (282, 277), (278, 279), (284, 272), (275, 220), (262, 218), (251, 219), (243, 221), (238, 225), (237, 236), (220, 260), (244, 246), (251, 248), (260, 247), (269, 244), (276, 240), (280, 238), (220, 260), (278, 281), (285, 256), (286, 277), (290, 280), (286, 278), (280, 283), (292, 281), (292, 282), (280, 232), (283, 233), (285, 235), (246, 232), (241, 230), (302, 251), (346, 230), (305, 280), (370, 200), (327, 236), (333, 236), (340, 236), (349, 232), (321, 234), (336, 217), (328, 218), (343, 218), (348, 221), (355, 236), (328, 340), (348, 228), (377, 232), (363, 231), (332, 268), (308, 298), (308, 306), (316, 301), (321, 304), (314, 306), (318, 307), (331, 315), (303, 277), (303, 269), (357, 215), (317, 249), (320, 273), (320, 269), (353, 266), (303, 260), (340, 209), (350, 211), (362, 187), (308, 216), (321, 221), (336, 309), (377, 304), (315, 278), (310, 280), (327, 309), (325, 309), (353, 206), (321, 276), (326, 210), (327, 204), (332, 172), (357, 195), (329, 187), (361, 211), (365, 205), (308, 303), (315, 304), (320, 306), (313, 279), (326, 309), (323, 310), (324, 309), (311, 276), (317, 308), (312, 308), (307, 308), (309, 326), (308, 319), (308, 315), (307, 311), (307, 308), (317, 308), (318, 310), (319, 311), (321, 314), (328, 296), (381, 266), (321, 309), (322, 309), (307, 284), (318, 281), (308, 282), (325, 253), (336, 258), (322, 272), (350, 177), (345, 188), (341, 203), (325, 319), (310, 206), (311, 187), (313, 170), (346, 235), (363, 241), (317, 233), (355, 223), (312, 245), (315, 271), (371, 246), (359, 246), (350, 250), (336, 249), (326, 246), (318, 243), (302, 236), (371, 262), (361, 222), (301, 281), (317, 257), (379, 231), (312, 240), (322, 273), (351, 228), (315, 266), (380, 284), (317, 231), (309, 262), (361, 322), (362, 331), (379, 264), (369, 311), (371, 217), (331, 348), (301, 282), (324, 262), (369, 232), (339, 232), (333, 232), (324, 311), (371, 278), (318, 360), (341, 349), (351, 342), (328, 232), (322, 231), (319, 231), (366, 220), (323, 225), (329, 223), (335, 223), (341, 224), (344, 225), (375, 214), (343, 231), (321, 292), (315, 277), (308, 290), (351, 333), (342, 341), (318, 353), (370, 320), (319, 229), (307, 247), (331, 355), (378, 281), (312, 308), (313, 310), (314, 313), (315, 316), (318, 323), (322, 308), (324, 308), (325, 307), (333, 302), (361, 282), (307, 240), (311, 226), (316, 226), (321, 309), (364, 300), (304, 226), (323, 331), (302, 244), (313, 259), (312, 335), (340, 318), (328, 278), (332, 326), (344, 276), (335, 285), (351, 288), (316, 345), (317, 263), (347, 324), (338, 332), (345, 309), (370, 291), (355, 309), (376, 297), (341, 295), (312, 252), (313, 274), (318, 276), (310, 270), (316, 220), (327, 215), (337, 214), (346, 215), (352, 218), (357, 230), (379, 248), (351, 240), (344, 242), (335, 242), (326, 241), (319, 239), (314, 237), (380, 248), (318, 278), (307, 254), (308, 275), (305, 279), (309, 276), (316, 280), (304, 280), (303, 282), (314, 231), (310, 233), (308, 235), (347, 227), (351, 224), (261, 230), (269, 229), (260, 224), (253, 231), (262, 237), (333, 226), (340, 226), (333, 220), (327, 226), (334, 232)]
    reference_points = [(306, 309), (304, 285), (304, 292), (296, 260), (303, 277), (302, 267), (300, 242), (252, 245), (299, 226), (298, 217), (295, 179), (306, 312), (307, 315), (307, 317), (307, 317), (307, 320), (307, 323), (307, 327), (307, 334), (304, 289), (297, 289), (224, 220), (273, 248), (266, 250), (259, 250), (250, 248), (279, 246), (259, 231), (267, 231), (252, 234), (248, 237), (245, 253), (283, 351), (250, 244), (224, 253), (236, 249), (270, 281), (298, 308), (300, 316), (291, 312), (287, 316), (295, 317), (291, 318), (277, 327), (298, 285), (296, 278), (237, 233), (282, 261), (282, 284), (282, 280), (249, 282), (296, 268), (251, 224), (242, 227), (230, 206), (284, 225), (275, 232), (271, 321), (235, 324), (288, 288), (293, 289), (284, 322), (285, 322), (238, 223), (282, 287), (265, 222), (263, 217), (256, 186), (236, 214), (262, 200), (232, 230), (230, 225), (299, 312), (293, 315), (289, 317), (289, 289), (284, 322), (287, 322), (286, 321), (290, 285), (292, 319), (296, 318), (301, 317), (299, 335), (300, 327), (300, 323), (300, 320), (301, 318), (292, 319), (291, 321), (290, 323), (289, 325), (278, 308), (225, 287), (304, 290), (289, 320), (288, 321), (296, 292), (285, 291), (294, 291), (275, 266), (265, 272), (281, 283), (240, 195), (246, 205), (248, 218), (283, 330), (280, 216), (278, 198), (274, 181), (253, 250), (238, 259), (282, 244), (241, 241), (286, 255), (286, 281), (231, 266), (243, 263), (252, 265), (265, 263), (275, 259), (282, 255), (294, 245), (233, 281), (236, 240), (300, 289), (283, 268), (222, 253), (287, 250), (280, 284), (247, 245), (286, 276), (229, 305), (282, 241), (291, 271), (251, 339), (252, 348), (226, 285), (242, 330), (226, 238), (282, 360), (301, 290), (277, 274), (231, 251), (259, 246), (265, 245), (286, 324), (235, 297), (295, 369), (273, 362), (263, 357), (297, 197), (310, 369), (271, 244), (277, 242), (280, 242), (231, 239), (275, 237), (268, 237), (262, 237), (256, 239), (253, 241), (222, 235), (255, 245), (305, 298), (284, 302), (287, 287), (296, 299), (300, 234), (261, 348), (271, 354), (295, 363), (243, 338), (280, 239), (291, 257), (310, 362), (283, 367), (230, 301), (296, 318), (295, 320), (294, 323), (294, 327), (290, 333), (288, 320), (286, 320), (285, 319), (273, 314), (245, 299), (290, 249), (286, 236), (282, 237), (289, 320), (245, 318), (291, 235), (286, 342), (302, 258), (295, 252), (301, 250), (287, 269), (309, 354), (308, 343), (297, 344), (270, 331), (275, 290), (278, 338), (259, 291), (269, 298), (254, 304), (295, 354), (284, 274), (263, 338), (273, 345), (263, 323), (238, 310), (254, 325), (234, 316), (265, 309), (287, 262), (288, 284), (284, 286), (291, 279), (279, 230), (266, 228), (256, 229), (248, 231), (243, 235), (242, 247), (224, 268), (249, 256), (256, 257), (266, 256), (274, 253), (281, 250), (285, 247), (223, 270), (285, 288), (291, 264), (293, 284), (297, 288), (293, 286), (287, 290), (298, 288), (299, 290), (284, 241), (288, 243), (290, 244), (251, 243), (245, 240), (307, 259), (349, 237), (311, 288), (373, 207), (331, 244), (338, 244), (344, 244), (353, 240), (325, 243), (340, 225), (332, 226), (347, 226), (351, 228), (359, 244), (334, 347), (352, 235), (379, 239), (366, 239), (337, 275), (314, 307), (313, 314), (322, 309), (327, 312), (319, 314), (324, 315), (336, 322), (309, 284), (310, 276), (361, 222), (322, 257), (325, 280), (325, 276), (358, 273), (309, 267), (344, 216), (354, 218), (364, 195), (313, 224), (325, 229), (341, 315), (380, 311), (320, 285), (315, 288), (333, 317), (331, 316), (357, 213), (326, 283), (330, 217), (331, 211), (335, 179), (360, 203), (332, 194), (365, 219), (368, 213), (314, 311), (321, 312), (326, 313), (319, 286), (332, 316), (329, 317), (330, 316), (317, 283), (323, 316), (318, 316), (313, 316), (316, 333), (315, 326), (314, 322), (313, 319), (313, 316), (323, 316), (324, 317), (325, 319), (327, 321), (333, 303), (384, 273), (327, 316), (328, 317), (313, 291), (323, 288), (314, 289), (329, 261), (341, 265), (326, 279), (352, 185), (348, 196), (346, 210), (331, 326), (314, 214), (315, 195), (317, 178), (350, 242), (367, 248), (321, 241), (359, 231), (317, 252), (321, 278), (374, 253), (363, 254), (354, 257), (341, 257), (330, 254), (323, 251), (307, 243), (374, 269), (364, 230), (308, 288), (322, 265), (382, 239), (317, 248), (327, 280), (355, 236), (320, 273), (383, 292), (321, 239), (315, 269), (365, 329), (366, 338), (382, 271), (373, 318), (374, 225), (337, 355), (307, 290), (328, 270), (372, 239), (343, 240), (337, 240), (330, 318), (374, 285), (325, 367), (347, 356), (356, 349), (332, 240), (326, 239), (323, 239), (369, 227), (327, 234), (333, 232), (338, 231), (344, 232), (348, 233), (378, 221), (347, 239), (326, 299), (320, 284), (314, 297), (356, 339), (347, 347), (325, 360), (374, 327), (323, 237), (312, 255), (337, 362), (381, 288), (318, 316), (319, 318), (320, 320), (321, 323), (324, 330), (328, 316), (329, 315), (331, 314), (338, 308), (365, 289), (312, 247), (315, 234), (320, 234), (327, 316), (368, 307), (308, 234), (329, 338), (307, 251), (318, 267), (319, 342), (345, 325), (333, 285), (338, 333), (349, 283), (340, 292), (356, 295), (323, 352), (322, 270), (352, 330), (343, 339), (350, 316), (374, 298), (359, 316), (379, 304), (346, 302), (317, 260), (319, 282), (323, 283), (316, 277), (320, 228), (331, 223), (341, 222), (350, 223), (355, 226), (360, 237), (382, 255), (355, 247), (348, 250), (339, 250), (330, 249), (323, 247), (319, 245), (383, 256), (323, 285), (313, 262), (314, 283), (311, 286), (314, 284), (321, 287), (310, 287), (309, 289), (318, 239), (315, 241), (312, 243), (350, 235), (355, 231), (264, 241), (271, 240), (263, 235), (257, 242), (265, 247), (337, 234), (344, 234), (337, 228), (330, 235), (338, 241)]

    calibration = calibrate_eye_position(reference_points)

    while CAM_AVALIABLE:

        _, frame = cam.read()
        # print(frame.shape)

        if frame is not None:

            imgcopy = frame.copy()
            di = dl.now()
            _, landmask_list = pface.extract(frame) # Imagem capturada em determinado frame
            points = pface.points_normalize(landmask_list, imgcopy.shape, index=0) # Normalização, explicar melhor
            iris_analyser = geometry.get_points_media(points, direct='iris_analyser')

            if not got_a_point:
                print("!!! GOT A POINT !!!", landmask_list)
                got_a_point = True
            
            if frame_start:
                info_img['new']['contour'] = [iris_analyser]
                info_img['new']['points'] = points
                frame_start = False
                info_task = construct_task(frame.shape[:2])
            else:

                info_img['old']['contour'] = info_img['new']['contour']
                info_img['old']['points'] = info_img['new']['points']
                info_img['old']['box'] = info_img['new']['box']

                info_img['new']['contour'] = [iris_analyser]
                info_img['new']['points'] = points

                if len(iris_analyser) > 0:
                    
                    #if reference_points is None:
                    #    reference_points = points
                    #    direction = "Center"
                    #else:
                    #    direction = calculate_eye_movement_reference(points, reference_points)
                    
                    direction = calculate_eye_movement(points, calibration,history)

                    frame = visualize.draw_text(frame, f"Eye Direction: {direction}", diff=(50, 400))
                    # Optionally, update reference points periodically
                    # if frame_count % 30 == 0:
                    #     reference_points = points

                    if draw_enable:

                        ptsx = 0
                        ptsy = 0
                        for i in [472, 470]:
                            if info_task['txr'][counter_delay] == direction[i]['x']:
                                ptsx +=2
                            if info_task['tyr'][counter_delay] == direction[i]['y']:
                                ptsy +=1

                        for i in [477, 475]:
                            if info_task['txr'][counter_delay] == direction[i]['x']:
                                ptsx += 2
                            if info_task['tyr'][counter_delay] == direction[i]['y']:
                                ptsy +=1

                        wait_eyes = (dl.now()-runtime).total_seconds()
                        if (ptsy+ptsx) > 4:
                            scores.append(1)
                            counter_delay +=1
                            if len(buffing) <= 10:
                                buffing.append(frame)

                        elif wait_eyes > 5:
                            runtime = dl.now()
                            scores.append(0)
                            counter_delay +=1
                            if len(buffing) <= 10:
                                buffing.append(frame)

            if counter_delay >= 6:
                text = grid_eyes.verificar(np.median(scores))
                draw_enable = False
                frame = visualize.draw_text(frame, text, diff=(50, 250),font_size=0.5)
                frame = visualize.draw_text(frame, "{}".format(scores), diff=(50, 200),font_size=0.5)
                if text == "Fake":
                    cv2.imshow("Frist Image", buffing[0])
                    cv2.imshow("Last Image", buffing[-1])

            if draw_enable:

                frame = visualize.draw_circule(frame, (info_task['cxs'][counter_delay],
                                                       info_task['cys'][counter_delay]),
                                               info_task['cores'][counter_delay])


            cv2.imshow("cam", frame)

            key = cv2.waitKey(1) & 0xFF

            if key == ord("q"):
                break

            if key == ord("r"):
                info_task = construct_task(frame.shape[:2])
                runtime = dl.now()
                counter_delay = 0

            if key == ord("b"):
                runtime = dl.now()
                draw_enable = True

cv2.destroyAllWindows()