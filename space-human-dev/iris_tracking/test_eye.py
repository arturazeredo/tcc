from typing import List, Tuple

from typing import List, Tuple

def calculate_eye_movement_realtime(current_points: List[Tuple[int, int]]) -> str:
    def calculate_eye_center(points: List[Tuple[int, int]]) -> Tuple[float, float]:
        return sum(p[0] for p in points) / len(points), sum(p[1] for p in points) / len(points)

    # Define indices for key points of each eye
    left_eye_indices = [473, 474, 475, 476]
    right_eye_indices = [468, 469, 470, 471]

    # Calculate eye centers
    left_eye_center = calculate_eye_center([current_points[i] for i in left_eye_indices])
    right_eye_center = calculate_eye_center([current_points[i] for i in right_eye_indices])

    # Calculate the position of the iris relative to the eye corners
    left_eye_width = current_points[left_eye_indices[-1]][0] - current_points[left_eye_indices[0]][0]
    right_eye_width = current_points[right_eye_indices[-1]][0] - current_points[right_eye_indices[0]][0]

    left_eye_height = max(p[1] for p in [current_points[i] for i in left_eye_indices]) - \
                      min(p[1] for p in [current_points[i] for i in left_eye_indices])
    right_eye_height = max(p[1] for p in [current_points[i] for i in right_eye_indices]) - \
                       min(p[1] for p in [current_points[i] for i in right_eye_indices])

    left_x_ratio = (left_eye_center[0] - current_points[left_eye_indices[0]][0]) / left_eye_width
    left_y_ratio = (left_eye_center[1] - current_points[left_eye_indices[1]][1]) / left_eye_height

    right_x_ratio = (right_eye_center[0] - current_points[right_eye_indices[0]][0]) / right_eye_width
    right_y_ratio = (right_eye_center[1] - current_points[right_eye_indices[1]][1]) / right_eye_height

    # Average the ratios from both eyes
    avg_x_ratio = (left_x_ratio + right_x_ratio) / 2
    avg_y_ratio = (left_y_ratio + right_y_ratio) / 2

    # Determine direction based on average ratios
    direction = ""
    x_threshold = 0.05
    y_threshold = 0.1

    if avg_x_ratio < 0.5 - x_threshold:
        direction += "Left"
    elif avg_x_ratio > 0.5 + x_threshold:
        direction += "Right"

    if avg_y_ratio < 0.5 - y_threshold:
        direction += " Up"
    elif avg_y_ratio > 0.5 + y_threshold:
        direction += " Down"

    if not direction:
        direction = "Center"

    return direction

# Example usage:
# Assume we have a list of current points

# Convert the provided data to the required format
data = {"1": [273, 390], "2": [271, 351], "3": [271, 365], "4": [262, 321], "5": [270, 340], "6": [270, 328], "7": [269, 302], "8": [206, 309], "9": [268, 286], "10": [268, 274], "11": [267, 229], "12": [273, 394], "13": [273, 399], "14": [273, 402], "15": [272, 402], "16": [273, 406], "17": [273, 410], "18": [273, 415], "19": [272, 429], "20": [271, 358], "21": [261, 359], "22": [171, 286], "23": [232, 314], "24": [223, 316], "25": [214, 317], "26": [203, 313], "27": [240, 311], "28": [216, 289], "29": [226, 288], "30": [206, 292], "31": [201, 297], "32": [195, 321], "33": [236, 453], "34": [203, 307], "35": [167, 328], "36": [184, 317], "37": [225, 354], "38": [262, 389], "39": [263, 399], "40": [250, 395], "41": [243, 402], "42": [255, 402], "43": [248, 405], "44": [229, 419], "45": [263, 351], "46": [261, 341], "47": [186, 292], "48": [242, 328], "49": [239, 354], "50": [239, 349], "51": [198, 358], "52": [261, 330], "53": [206, 276], "54": [194, 283], "55": [179, 266], "56": [248, 279], "57": [236, 291], "58": [222, 411], "59": [175, 427], "60": [247, 359], "61": [255, 362], "62": [237, 413], "63": [239, 412], "64": [188, 278], "65": [239, 360], "66": [223, 274], "67": [221, 267], "68": [216, 237], "69": [186, 272], "70": [222, 252], "71": [180, 289], "72": [177, 289], "73": [262, 394], "74": [253, 399], "75": [246, 403], "76": [249, 361], "77": [238, 412], "78": [242, 412], "79": [240, 411], "80": [252, 354], "81": [250, 406], "82": [256, 404], "83": [264, 403], "84": [260, 429], "85": [262, 415], "86": [263, 410], "87": [263, 406], "88": [264, 403], "89": [250, 407], "90": [249, 409], "91": [247, 411], "92": [246, 414], "93": [232, 390], "94": [165, 379], "95": [271, 361], "96": [245, 409], "97": [244, 410], "98": [258, 366], "99": [243, 366], "100": [257, 364], "101": [233, 335], "102": [219, 343], "103": [237, 355], "104": [194, 249], "105": [200, 260], "106": [201, 270], "107": [238, 423], "108": [243, 267], "109": [243, 250], "110": [239, 231], "111": [207, 316], "112": [185, 329], "113": [245, 308], "114": [192, 303], "115": [248, 321], "116": [246, 348], "117": [175, 341], "118": [192, 334], "119": [204, 336], "120": [222, 332], "121": [234, 326], "122": [244, 320], "123": [260, 305], "124": [176, 361], "125": [184, 303], "126": [266, 357], "127": [242, 337], "128": [164, 333], "129": [251, 314], "130": [237, 357], "131": [199, 309], "132": [245, 343], "133": [168, 403], "134": [245, 304], "135": [253, 335], "136": [194, 440], "137": [194, 457], "138": [167, 370], "139": [184, 429], "140": [172, 307], "141": [233, 466], "142": [267, 361], "143": [235, 345], "144": [176, 320], "145": [215, 311], "146": [222, 311], "147": [241, 413], "148": [178, 382], "149": [252, 480], "150": [221, 473], "151": [208, 467], "152": [267, 249], "153": [273, 480], "154": [230, 309], "155": [238, 307], "156": [243, 306], "157": [178, 303], "158": [236, 299], "159": [227, 298], "160": [219, 298], "161": [212, 301], "162": [207, 303], "163": [166, 307], "164": [210, 310], "165": [271, 375], "166": [240, 382], "167": [247, 357], "168": [258, 376], "169": [269, 295], "170": [206, 452], "171": [219, 460], "172": [251, 470], "173": [184, 445], "174": [242, 302], "175": [255, 320], "176": [273, 469], "177": [235, 478], "178": [170, 393], "179": [256, 404], "180": [255, 407], "181": [254, 410], "182": [253, 415], "183": [248, 427], "184": [243, 409], "185": [241, 408], "186": [239, 408], "187": [225, 400], "188": [191, 382], "189": [255, 312], "190": [251, 295], "191": [245, 298], "192": [245, 409], "193": [189, 410], "194": [258, 294], "195": [242, 440], "196": [270, 319], "197": [261, 313], "198": [269, 310], "199": [248, 336], "200": [272, 456], "201": [272, 442], "202": [257, 442], "203": [219, 426], "204": [230, 367], "205": [230, 435], "206": [211, 368], "207": [222, 378], "208": [202, 387], "209": [253, 457], "210": [242, 343], "211": [210, 437], "212": [223, 446], "213": [212, 414], "214": [180, 400], "215": [200, 418], "216": [175, 413], "217": [215, 394], "218": [249, 328], "219": [249, 352], "220": [242, 357], "221": [253, 344], "222": [242, 287], "223": [225, 283], "224": [212, 284], "225": [201, 288], "226": [194, 295], "227": [192, 312], "228": [166, 349], "229": [200, 324], "230": [210, 325], "231": [222, 324], "232": [233, 320], "233": [243, 315], "234": [249, 311], "235": [164, 357], "236": [243, 360], "237": [255, 327], "238": [256, 351], "239": [261, 357], "240": [256, 354], "241": [246, 364], "242": [263, 357], "243": [264, 361], "244": [248, 304], "245": [253, 305], "246": [255, 306], "247": [205, 305], "248": [197, 302], "249": [277, 320], "250": [332, 308], "251": [279, 359], "252": [361, 282], "253": [307, 313], "254": [316, 315], "255": [325, 315], "256": [336, 312], "257": [300, 310], "258": [321, 287], "259": [311, 287], "260": [331, 290], "261": [336, 294], "262": [343, 318], "263": [308, 450], "264": [335, 306], "265": [368, 322], "266": [353, 313], "267": [315, 351], "268": [283, 388], "269": [282, 399], "270": [294, 393], "271": [301, 399], "272": [290, 400], "273": [296, 403], "274": [314, 416], "275": [279, 351], "276": [279, 340], "277": [349, 287], "278": [297, 327], "279": [301, 352], "280": [301, 347], "281": [341, 353], "282": [278, 329], "283": [329, 273], "284": [341, 279], "285": [352, 262], "286": [289, 278], "287": [302, 291], "288": [321, 408], "289": [365, 422], "290": [294, 358], "291": [286, 361], "292": [306, 410], "293": [304, 409], "294": [346, 274], "295": [301, 357], "296": [312, 272], "297": [314, 265], "298": [317, 235], "299": [347, 268], "300": [312, 250], "301": [354, 285], "302": [356, 284], "303": [283, 394], "304": [292, 397], "305": [298, 401], "306": [291, 360], "307": [305, 409], "308": [301, 409], "309": [303, 409], "310": [289, 353], "311": [294, 405], "312": [288, 403], "313": [281, 402], "314": [284, 428], "315": [283, 415], "316": [282, 409], "317": [281, 405], "318": [280, 402], "319": [294, 405], "320": [295, 407], "321": [297, 409], "322": [298, 412], "323": [310, 387], "324": [371, 374], "325": [298, 407], "326": [300, 408], "327": [283, 365], "328": [297, 364], "329": [284, 363], "330": [306, 333], "331": [321, 340], "332": [303, 353], "333": [338, 245], "334": [332, 256], "335": [333, 267], "336": [306, 421], "337": [293, 265], "338": [291, 249], "339": [294, 230], "340": [332, 314], "341": [352, 326], "342": [294, 307], "343": [345, 300], "344": [290, 319], "345": [295, 346], "346": [362, 335], "347": [346, 331], "348": [334, 332], "349": [317, 330], "350": [305, 325], "351": [296, 319], "352": [278, 305], "353": [362, 355], "354": [351, 300], "355": [275, 357], "356": [297, 335], "357": [369, 328], "358": [289, 314], "359": [303, 355], "360": [339, 307], "361": [295, 341], "362": [370, 398], "363": [294, 304], "364": [287, 334], "365": [349, 435], "366": [349, 452], "367": [371, 364], "368": [359, 423], "369": [362, 302], "370": [312, 463], "371": [274, 361], "372": [305, 343], "373": [360, 316], "374": [324, 309], "375": [317, 309], "376": [303, 411], "377": [362, 376], "378": [295, 479], "379": [324, 470], "380": [337, 463], "381": [309, 308], "382": [302, 306], "383": [297, 305], "384": [357, 299], "385": [303, 299], "386": [311, 298], "387": [319, 298], "388": [326, 300], "389": [330, 302], "390": [366, 303], "391": [329, 309], "392": [301, 380], "393": [294, 355], "394": [284, 375], "395": [338, 447], "396": [326, 456], "397": [294, 468], "398": [358, 440], "399": [297, 302], "400": [284, 319], "401": [311, 475], "402": [369, 387], "403": [288, 403], "404": [289, 406], "405": [290, 409], "406": [292, 413], "407": [296, 425], "408": [301, 406], "409": [303, 406], "410": [305, 405], "411": [317, 397], "412": [350, 377], "413": [284, 311], "414": [288, 295], "415": [293, 298], "416": [298, 407], "417": [353, 405], "418": [280, 293], "419": [302, 438], "420": [278, 313], "421": [291, 334], "422": [287, 441], "423": [324, 423], "424": [310, 364], "425": [314, 432], "426": [330, 364], "427": [319, 375], "428": [339, 383], "429": [292, 455], "430": [297, 341], "431": [333, 432], "432": [321, 443], "433": [331, 410], "434": [361, 394], "435": [343, 414], "436": [366, 407], "437": [327, 390], "438": [290, 327], "439": [292, 351], "440": [298, 355], "441": [287, 343], "442": [296, 287], "443": [311, 282], "444": [324, 282], "445": [335, 285], "446": [342, 291], "447": [345, 310], "448": [370, 343], "449": [338, 321], "450": [329, 323], "451": [317, 322], "452": [306, 318], "453": [297, 315], "454": [291, 311], "455": [370, 351], "456": [298, 358], "457": [285, 326], "458": [285, 350], "459": [280, 356], "460": [285, 353], "461": [295, 362], "462": [278, 357], "463": [277, 360], "464": [291, 304], "465": [286, 305], "466": [283, 306], "467": [333, 304], "468": [340, 300], "469": [222, 304], "470": [232, 303], "471": [221, 296], "472": [212, 306], "473": [223, 312], "474": [316, 302], "475": [325, 303], "476": [317, 295], "477": [307, 302], "478": [315, 310]}

# Convert the dictionary to a list of tuples
current_points = [tuple(data[str(i)]) for i in range(1, 479)]
movement = calculate_eye_movement_realtime(current_points)
print(f"Eye movement: {movement}")